---
- name: Update CM Services Including Those Without roleConfigGroups
  hosts: cm_server
  vars_files:
    - ../inventories/production/group_vars/cm_servers.yml
  tasks:
    # 1. Authentication
    - name: Get CM API auth token
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/auth/signin"
        method: POST
        body_format: json
        body:
          username: "{{ cm_admin_user }}"
          password: "{{ cm_admin_password }}"
        validate_certs: no
        status_code: 200
      register: auth_result
      no_log: true
      delegate_to: localhost

    - name: Set auth token
      set_fact:
        cm_api_token: "{{ auth_result.json.token }}"
      no_log: true

    # 2. Service discovery
    - name: Get cluster services
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/clusters/{{ cluster_name }}/services"
        method: GET
        headers:
          Authorization: "Bearer {{ cm_api_token }}"
        validate_certs: no
        status_code: 200
      register: cluster_services
      no_log: true

    # 3. Service configuration mapping
    - name: Set service configuration mapping
      set_fact:
        service_config_map: {
          'hive': {'type': 'service_level', 'config_key': 'hive_metastore_database_password', 'password': '{{ primary_db_password }}'},
          'hue': {'type': 'service_level', 'config_key': 'database_password', 'password': '{{ primary_db_password }}'},
          'ranger': {'type': 'service_level', 'config_key': 'db_password', 'password': '{{ secondary_db_password }}'},
          'rangerkms': {'type': 'service_level', 'config_key': 'db_password', 'password': '{{ secondary_db_password }}'},
          'yarn': {'type': 'role_level', 'config_key': 'yarn_resourcemanager_store_password', 'password': '{{ primary_db_password }}', 'role_group': 'yarn-RESOURCEMANAGER-BASE'},
          'oozie': {'type': 'role_level', 'config_key': 'oozie_database_password', 'password': '{{ primary_db_password }}', 'role_group': 'oozie-OOZIE_SERVER-BASE'},
          'nifiregistry': {'type': 'role_level', 'config_key': 'nifi.registry.db.password', 'password': '{{ secondary_db_password }}', 'role_group': 'nifiregistry-NIFI_REGISTRY_SERVER-BASE'}
        }
      no_log: true

    # 4. Update services without roleConfigGroups (service level config)
    - name: Update service-level configurations
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/clusters/{{ cluster_name }}/services/{{ item.name }}/config"
        method: PUT
        headers:
          Authorization: "Bearer {{ cm_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          items: [{
            name: "{{ item.config.config_key }}",
            value: "{{ item.config.password }}",
            sensitive: true
          }]
        validate_certs: no
        status_code: 200
      loop: "{{ cluster_services.json.items | json_query(query) }}"
      vars:
        query: |
          [?contains(['hive','hue','ranger','rangerkms'], to_lower(name))]
          .{name: name, config: service_config_map::get(to_lower(name))}
      no_log: true
      register: service_level_updates
      retries: 3
      delay: 10
      until: service_level_updates is succeeded

    # 5. Update services with roleConfigGroups (role level config)
    - name: Update role-level configurations
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/clusters/{{ cluster_name }}/services/{{ item.name }}/roleConfigGroups/{{ item.config.role_group }}/config"
        method: PUT
        headers:
          Authorization: "Bearer {{ cm_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          items: [{
            name: "{{ item.config.config_key }}",
            value: "{{ item.config.password }}",
            sensitive: true
          }]
        validate_certs: no
        status_code: 200
      loop: "{{ cluster_services.json.items | json_query(query) }}"
      vars:
        query: |
          [?contains(['yarn','oozie','nifiregistry'], to_lower(name))]
          .{name: name, config: service_config_map::get(to_lower(name))}
      no_log: true
      register: role_level_updates
      retries: 3
      delay: 10
      until: role_level_updates is succeeded

    # 6. Special handling for Queue Manager (YARN)
    - name: Update YARN Queue Manager configuration
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/clusters/{{ cluster_name }}/services/{{ item }}/config"
        method: PUT
        headers:
          Authorization: "Bearer {{ cm_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          items: [{
            name: "yarn_resourcemanager_store_password",
            value: "{{ primary_db_password }}",
            sensitive: true
          }]
        validate_certs: no
        status_code: 200
      loop: "{{ cluster_services.json.items | selectattr('name', 'match', '(?i)^yarn') | map(attribute='name') | list }}"
      no_log: true
