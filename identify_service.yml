---
- name: Update CM Services with Flexible Name Matching
  hosts: cm_server
  vars_files:
    - ../inventories/production/group_vars/cm_servers.yml
  tasks:
    # 1. Authentication (same as before)
    - name: Get CM API auth token
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/auth/signin"
        method: POST
        body_format: json
        body:
          username: "{{ cm_admin_user }}"
          password: "{{ cm_admin_password }}"
        validate_certs: no
        status_code: 200
      register: auth_result
      no_log: true
      delegate_to: localhost

    - name: Set auth token
      set_fact:
        cm_api_token: "{{ auth_result.json.token }}"
      no_log: true

    # 2. Enhanced service discovery with name normalization
    - name: Get cluster services
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/clusters/{{ cluster_name }}/services"
        method: GET
        headers:
          Authorization: "Bearer {{ cm_api_token }}"
        validate_certs: no
        status_code: 200
      register: cluster_services
      no_log: true

    - name: Normalize service names and create mapping
      set_fact:
        normalized_services: >-
          {{
            dict(cluster_services.json.items | 
                 map('map', 'lower') |
                 map('regex_replace', '-?\d*$', '') |
                 map('join', '|') |
                 list)
          }}
      no_log: true

    # 3. Enhanced service configuration mapping
    - name: Set service password mapping
      set_fact:
        service_config_map: {
          'hive': {'config_key': 'hive_metastore_database_password', 'password': '{{ primary_db_password }}', 'role_group': 'hive-HIVEMETASTORE-BASE'},
          'hue': {'config_key': 'database_password', 'password': '{{ primary_db_password }}', 'role_group': 'hue-HUE_SERVER-BASE'},
          'oozie': {'config_key': 'oozie_database_password', 'password': '{{ primary_db_password }}', 'role_group': 'oozie-OOZIE_SERVER-BASE'},
          'yarn': {'config_key': 'yarn_resourcemanager_store_password', 'password': '{{ primary_db_password }}', 'role_group': 'yarn-RESOURCEMANAGER-BASE'},
          'ranger': {'config_key': 'db_password', 'password': '{{ secondary_db_password }}', 'role_group': 'ranger-RANGER_ADMIN-BASE'},
          'rangerkms': {'config_key': 'db_password', 'password': '{{ secondary_db_password }}', 'role_group': 'rangerkms-RANGER_KMS_SERVER-BASE'},
          'nifiregistry': {'config_key': 'nifi.registry.db.password', 'password': '{{ secondary_db_password }}', 'role_group': 'nifiregistry-NIFI_REGISTRY_SERVER-BASE'}
        }
      no_log: true

    # 4. Find matching services using normalized names
    - name: Create service execution list
      set_fact:
        services_to_update: >-
          {{
            normalized_services | dict2items |
            selectattr('value', 'in', service_config_map.keys()) |
            map(attribute='key') | list
          }}
      no_log: true

    # 5. Update configurations with original service names
    - name: Update service configurations
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/clusters/{{ cluster_name }}/services/{{ item }}/roleConfigGroups/{{ service_config_map[normalized_services[item]].role_group }}/config"
        method: PUT
        headers:
          Authorization: "Bearer {{ cm_api_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          items: [{
            name: "{{ service_config_map[normalized_services[item]].config_key }}",
            value: "{{ service_config_map[normalized_services[item]].password }}",
            sensitive: true
          }]
        validate_certs: no
        status_code: 200
      loop: "{{ services_to_update }}"
      no_log: true
      register: config_updates
      retries: 3
      delay: 10
      until: config_updates is succeeded

    # 6. Enhanced Reports Manager check
    - name: Check for Reports Manager
      uri:
        url: "https://{{ cm_host }}:7183/api/v40/cm/service"
        method: GET
        headers:
          Authorization: "Bearer {{ cm_api_token }}"
        validate_certs: no
        status_code: 200
      register: cm_service
      no_log: true

    - name: Set reports manager fact
      set_fact:
        reports_manager_exists: >-
          {{
            'REPORTSMANAGER' in (cm_service.json.roles | 
                                 map(attribute='type') |
                                 map('upper') |
                                 list)
          }}
      no_log: true

    # [Rest of the tasks remain the same as previous example]
    # ... (restart tasks, etc)
