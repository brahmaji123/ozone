#!/usr/bin/env python3

import json
import sys
import requests
from datetime import datetime
from requests.auth import HTTPBasicAuth
import os

# --- CLI argument check ---
if len(sys.argv) < 2:
    print("Usage: python3 update_passwords.py <config.json> [--dry-run]")
    sys.exit(1)

CONFIG_PATH = sys.argv[1]
DRY_RUN = len(sys.argv) > 2 and sys.argv[2] == "--dry-run"
LOG_PATH = "/tmp/keystore_password_update.log"

# --- Load config from JSON ---
with open(CONFIG_PATH, 'r') as f:
    config = json.load(f)

CM_HOST = config['cm_host']
CM_PORT = config['cm_port']
USERNAME = config['cm_user']
PASSWORD = config['cm_password']
NEW_PASSWORD = config['new_keystore_password']

BASE_URL = f"http://{CM_HOST}:{CM_PORT}/api/v31"
auth = HTTPBasicAuth(USERNAME, PASSWORD)

# --- Logging function ---
def log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(LOG_PATH, 'a') as log_file:
        log_file.write(f"[{timestamp}] {message}\n")

# --- Password key filter ---
def is_relevant_password_key(key):
    key_l = key.lower()
    return (
        ("keystore" in key_l and "password" in key_l) or
        ("private_key" in key_l and "password" in key_l) or
        key_l in [
            "ssl_private_key_password",
            "ssl_server_keystore_password",
            "ssl_client_keystore_password",
            "ranger.ssl.keystore.password",
            "ranger.kms.keystore.password",
            "hive.ssl.keystore.password",
            "rangerkms.ssl.keystore.password",
            "impala.ssl_private_key_password"
        ]
    )

# --- CM API calls ---
def get_clusters():
    r = requests.get(f"{BASE_URL}/clusters", auth=auth)
    r.raise_for_status()
    return [c['name'] for c in r.json()["items"]]

def get_services(cluster_name):
    r = requests.get(f"{BASE_URL}/clusters/{cluster_name}/services", auth=auth)
    r.raise_for_status()
    return r.json()["items"]

def get_service_config(cluster_name, service_name):
    url = f"{BASE_URL}/clusters/{cluster_name}/services/{service_name}/config"
    r = requests.get(url, auth=auth)
    r.raise_for_status()
    return r.json()

def update_service_config(cluster_name, service_name, updates):
    url = f"{BASE_URL}/clusters/{cluster_name}/services/{service_name}/config"
    payload = {"items": [{"name": key, "value": value} for key, value in updates.items()]}
    r = requests.put(url, auth=auth, json=payload)
    r.raise_for_status()

def get_role_config_groups(cluster_name, service_name):
    url = f"{BASE_URL}/clusters/{cluster_name}/services/{service_name}/roleConfigGroups"
    r = requests.get(url, auth=auth)
    r.raise_for_status()
    return r.json()["items"]

def get_role_config(cluster_name, service_name, role_group_name):
    url = f"{BASE_URL}/clusters/{cluster_name}/services/{service_name}/roleConfigGroups/{role_group_name}/config"
    r = requests.get(url, auth=auth)
    r.raise_for_status()
    return r.json()

def update_role_config(cluster_name, service_name, role_group_name, updates):
    url = f"{BASE_URL}/clusters/{cluster_name}/services/{service_name}/roleConfigGroups/{role_group_name}/config"
    payload = {"items": [{"name": k, "value": v} for k, v in updates.items()]}
    r = requests.put(url, auth=auth, json=payload)
    r.raise_for_status()

# --- CM Config ---
def get_cm_config():
    r = requests.get(f"{BASE_URL}/cm/config", auth=auth)
    r.raise_for_status()
    return r.json()

def update_cm_config(updates):
    url = f"{BASE_URL}/cm/config"
    payload = {"items": [{"name": k, "value": v} for k, v in updates.items()]}
    r = requests.put(url, auth=auth, json=payload)
    r.raise_for_status()

# --- CMS Config and Roles ---
def get_cms_config():
    r = requests.get(f"{BASE_URL}/cm/service/config", auth=auth)
    r.raise_for_status()
    return r.json()

def update_cms_config(updates):
    url = f"{BASE_URL}/cm/service/config"
    payload = {"items": [{"name": k, "value": v} for k, v in updates.items()]}
    r = requests.put(url, auth=auth, json=payload)
    r.raise_for_status()

def get_cms_role_config_groups():
    r = requests.get(f"{BASE_URL}/cm/service/roleConfigGroups", auth=auth)
    r.raise_for_status()
    return r.json()["items"]

def get_cms_role_config(role_group_name):
    url = f"{BASE_URL}/cm/service/roleConfigGroups/{role_group_name}/config"
    r = requests.get(url, auth=auth)
    r.raise_for_status()
    return r.json()

def update_cms_role_config(role_group_name, updates):
    url = f"{BASE_URL}/cm/service/roleConfigGroups/{role_group_name}/config"
    payload = {"items": [{"name": k, "value": v} for k, v in updates.items()]}
    r = requests.put(url, auth=auth, json=payload)
    r.raise_for_status()

# --- Main logic ---
def main():
    log(f"\n{'='*30}\n{'DRY RUN' if DRY_RUN else 'LIVE RUN'} started")

    try:
        cluster_names = get_clusters()
    except Exception as e:
        log(f"Error fetching clusters: {e}")
        sys.exit(1)

    for cluster in cluster_names:
        log(f"\n=== Processing cluster: {cluster} ===")
        try:
            services = get_services(cluster)
        except Exception as e:
            log(f" → Error fetching services for cluster {cluster}: {e}")
            continue

        for svc in services:
            service_name = svc["name"]
            log(f"Processing service: {service_name}")

            # Service config
            try:
                config = get_service_config(cluster, service_name)
                updates = {}
                for item in config.get("items", []):
                    key = item.get("name")
                    if key and is_relevant_password_key(key):
                        updates[key] = NEW_PASSWORD
                if updates:
                    log(f" → {'Would update' if DRY_RUN else 'Updated'} service config: {updates}")
                    if not DRY_RUN:
                        update_service_config(cluster, service_name, updates)
            except Exception as e:
                log(f" → Error updating service config: {e}")

            # Role config groups
            try:
                role_groups = get_role_config_groups(cluster, service_name)
                for rg in role_groups:
                    rg_name = rg["name"]
                    rg_config = get_role_config(cluster, service_name, rg_name)
                    rg_updates = {}
                    for item in rg_config.get("items", []):
                        key = item.get("name")
                        if key and is_relevant_password_key(key):
                            rg_updates[key] = NEW_PASSWORD
                    if rg_updates:
                        log(f" → {'Would update' if DRY_RUN else 'Updated'} role group '{rg_name}': {rg_updates}")
                        if not DRY_RUN:
                            update_role_config(cluster, service_name, rg_name, rg_updates)
            except Exception as e:
                log(f" → Error updating role config: {e}")

    # CM Config
    log(f"\n=== Processing Cloudera Manager (CM) ===")
    try:
        cm_config = get_cm_config()
        cm_updates = {}
        for item in cm_config.get("items", []):
            key = item.get("name")
            if key and is_relevant_password_key(key):
                cm_updates[key] = NEW_PASSWORD
        if cm_updates:
            log(f" → {'Would update' if DRY_RUN else 'Updated'} CM config: {cm_updates}")
            if not DRY_RUN:
                update_cm_config(cm_updates)
    except Exception as e:
        log(f" → Error updating CM config: {e}")

    # CMS Config
    log(f"\n=== Processing Cloudera Management Services (CMS) ===")
    try:
        cms_config = get_cms_config()
        cms_updates = {}
        for item in cms_config.get("items", []):
            key = item.get("name")
            if key and is_relevant_password_key(key):
                cms_updates[key] = NEW_PASSWORD
        if cms_updates:
            log(f" → {'Would update' if DRY_RUN else 'Updated'} CMS config: {cms_updates}")
            if not DRY_RUN:
                update_cms_config(cms_updates)
    except Exception as e:
        log(f" → Error updating CMS config: {e}")

    # CMS Role Config Groups
    try:
        cms_roles = get_cms_role_config_groups()
        for rg in cms_roles:
            rg_name = rg["name"]
            rg_config = get_cms_role_config(rg_name)
            rg_updates = {}
            for item in rg_config.get("items", []):
                key = item.get("name")
                if key and is_relevant_password_key(key):
                    rg_updates[key] = NEW_PASSWORD
            if rg_updates:
                log(f" → {'Would update' if DRY_RUN else 'Updated'} CMS role group '{rg_name}': {rg_updates}")
                if not DRY_RUN:
                    update_cms_role_config(rg_name, rg_updates)
    except Exception as e:
        log(f" → Error updating CMS role config: {e}")

    log(f"{'DRY RUN' if DRY_RUN else 'LIVE RUN'} complete\n{'='*30}")
    os.remove(CONFIG_PATH)

if __name__ == "__main__":
    main()
